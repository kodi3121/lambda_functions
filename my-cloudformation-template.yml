AWSTemplateFormatVersion: '2010-09-09'
Description: Create an S3 bucket using CloudFormation

Resources:
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: my-kodi-bucket2002
      AccessControl: public
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: ExpireOldVersions
            Status: Enabled
            ExpirationInDays: 365
      Tags:
        - Key: Environment
          Value: dev


  # # Lambda Function
  # MyLambdaFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: my-lambda-function-kodisri
  #     Handler: index.handler
  #     Code:
  #       S3Bucket: s3-bucket-kodisri
  #       S3Key: lambda-code.zip
  #     Runtime: nodejs14.x

  # # Glue Job
  # MyGlueJob:
  #   Type: AWS::Glue::Job
  #   Properties:
  #     Name: my-glue-job-kodisri
  #     Command:
  #       Name: glueetl
  #       ScriptLocation: s3://s3-bucket-kodisri/glue-scripts/my-glue-script.py
  #     MaxCapacity: 10

  # # Step Functions State Machine
  # MyStepFunctionsStateMachine:
  #   Type: AWS::StepFunctions::StateMachine
  #   Properties:
  #     StateMachineName: my-step-functions-kodisri
  #     DefinitionString: '{"StartAt": "HelloWorld", "States": {"HelloWorld": {"Type": "Pass", "Result": "Hello, World!", "End": true}}}'

  # # EventBridge Bus
  # MyEventBridgeBus:
  #   Type: AWS::Events::EventBus
  #   Properties:
  #     Name: my-event-kodisri

  # # EventBridge Rule
  # MyEventBridgeRule:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     Name: my-event-rule-kodisri
  #     EventBusName: !Ref MyEventBridgeBus
  #     EventPattern:
  #       source:
  #         - "aws.s3"
  #     Targets:
  #       - Arn: arn:aws:lambda:eu-north-1:195275650552:function:my-lambda-function-kodisri
  #         Id: LambdaTarget

  # # CloudWatch Alarm
  # MyCloudWatchAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmName: my-cloudwatch-kodisri
  #     MetricName: CPUUtilization
  #     Namespace: AWS/EC2
  #     Statistic: Average
  #     ComparisonOperator: GreaterThanThreshold
  #     Threshold: 80
  #     Period: 300
  #     EvaluationPeriods: 1

  # # SNS Topic
  # MySNSTopic:
  #   Type: AWS::SNS::Topic
  #   Properties:
  #     TopicName: my-sns-kodisri

  # # SNS Subscription
  # MySNSSubscription:
  #   Type: AWS::SNS::Subscription
  #   Properties:
  #     Endpoint: pavansri2222@gmail.com
  #     Protocol: email
  #     TopicArn: !Ref MySNSTopic

  # # SQS Queue
  # MySQSQueue:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     QueueName: my-sqs-queue-kodisri

  # # Secrets Manager Secret
  # MySecret:
  #   Type: AWS::SecretsManager::Secret
  #   Properties:
  #     Name: my-secret-kodisri
  #     SecretString: '{"username":"admin","password":"mypassword123"}'

  # # API Gateway
  # MyApiGateway:
  #   Type: AWS::ApiGateway::RestApi
  #   Properties:
  #     Name: my-api-gateway-kodisri
  #     Description: "My API Gateway"

  # # API Gateway Resource
  # MyApiGatewayResource:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     ParentId: !GetAtt MyApiGateway.RootResourceId
  #     PathPart: mypath
  #     RestApiId: !Ref MyApiGateway

  # # API Gateway Method
  # MyApiGatewayMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     AuthorizationType: NONE
  #     HttpMethod: GET
  #     ResourceId: !Ref MyApiGatewayResource
  #     RestApiId: !Ref MyApiGateway
  #     Integration:
  #       IntegrationHttpMethod: POST
  #       Type: MOCK
  #       RequestTemplates:
  #         application/json: '{"statusCode": 200}'
