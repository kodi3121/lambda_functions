AWSTemplateFormatVersion: 2010-09-09
Resources:
  # S3 Bucket
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-cloudformation-s3-bucket

  # Lambda Function
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: my-lambda-function
      Handler: index.handler
      Code:
        S3Bucket: my-cloudformation-s3-bucket
        S3Key: lambda-code.zip
      Runtime: nodejs14.x

  # Glue Job
  MyGlueJob:
    Type: AWS::Glue::Job
    Properties:
      Name: my-glue-job
      Command:
        Name: glueetl
        ScriptLocation: s3://my-cloudformation-s3-bucket/glue-scripts/my-glue-script.py
      MaxCapacity: 10

  # Step Functions State Machine
  MyStepFunctionsStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: my-step-functions-state-machine
      DefinitionString: '{"StartAt": "HelloWorld", "States": {"HelloWorld": {"Type": "Pass", "Result": "Hello, World!", "End": true}}}'

  # EventBridge Bus
  MyEventBridgeBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: my-event-bus

  # EventBridge Rule
  MyEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: my-event-rule
      EventBusName: !Ref MyEventBridgeBus
      EventPattern:
        source:
          - "aws.s3"
      Targets:
        - Arn: arn:aws:lambda:REGION:ACCOUNT_ID:function:my-lambda-function
          Id: LambdaTarget

  # CloudWatch Alarm
  MyCloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: my-cloudwatch-alarm
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      Period: 300
      EvaluationPeriods: 1

  # SNS Topic
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: my-sns-topic

  # SNS Subscription
  MySNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: your-email@example.com
      Protocol: email
      TopicArn: !Ref MySNSTopic

  # SQS Queue
  MySQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: my-sqs-queue

  # Secrets Manager Secret
  MySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: my-secret
      SecretString: '{"username":"admin","password":"mypassword123"}'

  # API Gateway
  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: my-api-gateway
      Description: "My API Gateway"

  # API Gateway Resource
  MyApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: mypath
      RestApiId: !Ref MyApiGateway

  # API Gateway Method
  MyApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref MyApiGatewayResource
      RestApiId: !Ref MyApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
