---
AWSTemplateFormatVersion: 2010-09-09
Resources:
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-cloudformation-s3-bucket
  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - logs:*
                  - sns:Publish
                Resource:
                  - arn:aws:s3:::${MyS3Bucket}/*
                  - arn:aws:logs:*:*:*
                  - arn:aws:sns:REGION:ACCOUNT_ID:MySNSTopic
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: my-lambda-function
      Handler: index.handler
      Role: MyLambdaExecutionRole.Arn
      Code:
        S3Bucket: my-cloudformation-s3-bucket
        S3Key: lambda-code.zip
      Runtime: nodejs14.x
  MyGlueExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GlueExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - logs:*
                Resource:
                  - arn:aws:s3:::${MyS3Bucket}/*
                  - arn:aws:logs:*:*:*
  MyGlueJob:
    Type: AWS::Glue::Job
    Properties:
      Name: my-glue-job
      Role: MyGlueExecutionRole.Arn
      Command:
        Name: glueetl
        ScriptLocation: s3://my-cloudformation-s3-bucket/glue-scripts/my-glue-script.py
      MaxCapacity: 10
  MyStepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: arn:aws:lambda:REGION:ACCOUNT_ID:function:my-lambda-function
  MyStepFunctionsStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: my-step-functions-state-machine
      RoleArn: MyStepFunctionsRole.Arn
      DefinitionString: '{"StartAt": "HelloWorld", "States": {"HelloWorld": {"Type":
        "Pass", "Result": "Hello, World!", "End": true}}}'
  MyEventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EventBridgeExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: arn:aws:lambda:REGION:ACCOUNT_ID:function:my-lambda-function
  MyEventBridgeBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: my-event-bus
  MyEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: my-event-rule
      EventBusName: MyEventBridgeBus
      EventPattern:
        source:
          - aws.s3
      Targets:
        - Arn: arn:aws:lambda:REGION:ACCOUNT_ID:function:my-lambda-function
          Id: LambdaTarget
  MyCloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: my-cloudwatch-alarm
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      Period: 300
      EvaluationPeriods: 1
      AlarmActions:
        - arn:aws:sns:REGION:ACCOUNT_ID:MySNSTopic
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: my-sns-topic
  MySNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: your-email@example.com
      Protocol: email
      TopicArn: MySNSTopic
  MySQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: my-sqs-queue
  MySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: my-secret
      SecretString: '{"username":"admin","password":"mypassword123"}'
  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: my-api-gateway
      Description: My API Gateway
  MyApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: MyApiGateway.RootResourceId
      PathPart: mypath
      RestApiId: MyApiGateway
  MyApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: MyApiGatewayResource
      RestApiId: MyApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
